//
//  SecondViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 01.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SecondDisplayLogic: class {
    //func displaySecondFetchedTitle(viewModel: Second.FetchData.ViewModel)
    func displaySecondFetchedData(viewModel: Second.FetchData.ViewModel)
    func displayChangeControllerMode(viewModel: Second.ChangeControllerMode.ViewModel)
    
}

class SecondViewController: UIViewController {
    
    var interactor: SecondBusinessLogic?
    var router: (NSObjectProtocol & SecondRoutingLogic & SecondDataPassing)?
    
    private let collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: UICollectionViewLayout.init())
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        collectionView.backgroundColor = .secondarySystemBackground
        collectionView.register(TitleCollectionViewCell.self, forCellWithReuseIdentifier: String(describing:  TitleCollectionViewCell.self))
        collectionView.register(DetailsCollectionViewCell.self, forCellWithReuseIdentifier: String(describing: DetailsCollectionViewCell.self))
        return collectionView
    }()
    
    private var mode: ControllerMode = .viewing
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    private var displayedSections: [Second.DisplayedSection] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController          = self
        let interactor              = SecondInteractor()
        let presenter               = SecondPresenter()
        let router                  = SecondRouter()
        viewController.interactor   = interactor
        viewController.router       = router
        interactor.presenter        = presenter
        presenter.viewController    = viewController
        router.viewController       = viewController
        router.dataStore            = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor.white
        
        collectionView.frame = view.bounds
        view.addSubview(collectionView)
        
        collectionView.delegate = self
        collectionView.dataSource = self
        
        fetchOptions()
    }
    
    private func fetchOptions() {
        let request = Second.FetchData.Request()
        interactor?.fetchData(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
    
    private func openEventsVC(section: Second.DisplayedSection) {
//        let eventVC = EventViewController()
//        let selectedEvent = CategoryEnum(name: section.primaryKey)
//        eventVC.categoryEnum = selectedEvent
//        eventVC.navigationTitle = title
//        navigationController?.pushViewController(eventVC, animated: true)
    }
}

extension SecondViewController: SecondDisplayLogic {
    
    func displaySecondFetchedData(viewModel: Second.FetchData.ViewModel) {
        self.displayedSections = viewModel.displayedSection
        collectionView.reloadData()
    }
    
    func displayChangeControllerMode(viewModel: Second.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
}

extension SecondViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
        let section = displayedSections[indexPath.row]
        openEventsVC(section: section)
    }

}

extension SecondViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedSections.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type

        switch cellType {
        case .info(title: let title):
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: TitleCollectionViewCell.self), for: indexPath) as! TitleCollectionViewCell
            cell.setup(headerText: title)
            return cell
        case .description(title: let title, imageName: let imageName):
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: DetailsCollectionViewCell.self), for: indexPath) as! DetailsCollectionViewCell
            cell.setupValue(descriptionText: title, imageName: imageName)
            return cell
        }
    }

}

extension SecondViewController: UICollectionViewDelegateFlowLayout {
    
//    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
//        switch kind {
//        case UICollectionView.elementKindSectionHeader:
//            let reusableCell = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: String(describing: TitleCollectionViewCell.self), for: indexPath) as! TitleCollectionViewCell
//            reusableCell.setup(headerText: "azazaza")
//            return reusableCell
//        default:
//            fatalError("Not implemented")
//        }
//    }
    
//    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
//        return CGSize(width: view.bounds.width, height: 50.0)
//    }

}
