//
//  FirstViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 30.09.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FirstDisplayLogic: class {
    func displayFetchedData(viewModel: First.FetchData.ViewModel)
    func displayOpenDetails(viewModel: First.OpenDetails.ViewModel)

}

class FirstViewController: UIViewController {
    
    var interactor: FirstBusinessLogic?
    var router: (NSObjectProtocol & FirstRoutingLogic & FirstDataPassing)?
    
    private var mode: ControllerMode = .viewing
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.gray
        indicator.style = .large
        indicator.startAnimating()
        return indicator
    }()
    
    private let logoImage: UIImageView = {
        let image = UIImageView()
        image.translatesAutoresizingMaskIntoConstraints = false
        image.contentMode = .center
        return image
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor              = FirstInteractor()
        let presenter               = FirstPresenter()
        let router                  = FirstRouter()
        viewController.interactor   = interactor
        viewController.router       = router
        interactor.presenter        = presenter
        presenter.viewController    = viewController
        router.viewController       = viewController
        router.dataStore            = interactor
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        view.addSubview(activityIndicator)
        view.addSubview(logoImage)
        
        let constraints: [NSLayoutConstraint] = [
            logoImage.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            logoImage.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            activityIndicator.topAnchor.constraint(equalTo: logoImage.bottomAnchor, constant: 15.0),
            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ]
        
        NSLayoutConstraint.activate(constraints)
        
        self.fetchData()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.setNavigationBarHidden(false, animated: animated)
    }
    
    private func fetchData() {
        let request = First.FetchData.Request()
        self.interactor?.fetchData(request: request)
    }
    
    func displayOpenDetails(viewModel: First.OpenDetails.ViewModel) {
        self.router?.routeToSecond()
    }
    
    private func openDetailsViewController(index: Int) {
        let request = First.OpenDetails.Request(index: index)
        interactor?.openDetails(request: request)
    }
}

extension FirstViewController: FirstDisplayLogic {
    
    func displayFetchedData(viewModel: First.FetchData.ViewModel) {
        self.logoImage.image = UIImage(named: "ViperLogo")
        self.activityIndicator.stopAnimating()
        openDetailsViewController(index: 0)
    }
    
}
