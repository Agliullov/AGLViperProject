//
//  RestaurantMenuViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 01.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RestaurantMenuDisplayLogic: class {
    func displayRestaurantMenuFetchedData(viewModel: RestaurantMenuModel.FetchRestaurantMenuData.ViewModel)
    func displayRestaurantMenuChangeControllerMode(viewModel: RestaurantMenuModel.ChangeControllerMode.ViewModel)
    func displayRestaurantMenuOpenDetails(viewModel: RestaurantMenuModel.OpenRestaurantMenuDetails.ViewModel)
}

class RestaurantMenuViewController: UIViewController {
    var interactor: RestaurantMenuBusinessLogic?
    var router: (NSObjectProtocol & RestaurantMenuRoutingLogic & RestaurantMenuDataPassing)?
    
    var mutableHomeScreenData: [HomeScreenData] = []
    private var homeScreenData: [HomeScreenData] = []
    
    private var mode: ControllerMode = .viewing
    
    private var displayedSections: [RestaurantMenuModel.DisplayedSection] = []
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let size = UIScreen.main.bounds.size.width / 2 - 10
       // layout.estimatedItemSize = CGSize(width: UIScreen.main.bounds.size.width / 2, height: UIScreen.main.bounds.size.height / 2)
        layout.itemSize = CGSize(width: size, height: size)
       // layout.sectionInset = UIEdgeInsets(top: 4.0, left: 4.0, bottom: 4.0, right: 4.0)
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        collectionView.backgroundColor = UIColor.secondarySystemBackground
        collectionView.register(TitleCollectionViewCell.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: String(describing: TitleCollectionViewCell.self))
        collectionView.register(DetailsCollectionViewCell.self, forCellWithReuseIdentifier: String(describing: DetailsCollectionViewCell.self))
        return collectionView
    }()
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController          = self
        let interactor              = RestaurantMenuInteractor()
        let presenter               = RestaurantMenuPresenter()
        let router                  = RestaurantMenuRouter()
        viewController.interactor   = interactor
        viewController.router       = router
        interactor.presenter        = presenter
        presenter.viewController    = viewController
        router.viewController       = viewController
        router.dataStore            = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.addSubview(collectionView)
        collectionView.frame = view.bounds
        collectionView.delegate = self
        collectionView.dataSource = self
        
        titleTextAttribute()
        fetchOptions()
    }
    
    private func titleTextAttribute() {
        self.title = "Наше меню"
        
        navigationController?.navigationBar.titleTextAttributes = ColorHelper.shared.titleTextAttribute()
        navigationItem.setRightBarButton(UIBarButtonItem(image: UIImage(systemName: "square.and.arrow.down"), style: .done, target: self, action: #selector(openAndDataFromBasketVC)), animated: true)
    }
    
    @objc private func openAndDataFromBasketVC() {
        self.router?.routeToBasketVC()
    }
    
    private func fetchOptions() {
        let request = RestaurantMenuModel.FetchRestaurantMenuData.Request()
        interactor?.fetchRestaurantMenuData(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
    
    private func openRestaurantDetailsViewController(index: Int) {
        let request = RestaurantMenuModel.OpenRestaurantMenuDetails.Request(index: index)
        interactor?.openRestaurantMenuDetails(request: request)
    }
}

extension RestaurantMenuViewController: RestaurantMenuDisplayLogic {
    
    func displayRestaurantMenuFetchedData(viewModel: RestaurantMenuModel.FetchRestaurantMenuData.ViewModel) {
        self.displayedSections = viewModel.displayedSection
        collectionView.reloadData()
    }
    
    func displayRestaurantMenuChangeControllerMode(viewModel: RestaurantMenuModel.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
    func displayRestaurantMenuOpenDetails(viewModel: RestaurantMenuModel.OpenRestaurantMenuDetails.ViewModel) {
        self.router?.routeToRestaurantDetails(index: viewModel.index)
    }
}

extension RestaurantMenuViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        openRestaurantDetailsViewController(index: indexPath.item)
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension RestaurantMenuViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return displayedSections.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedSections[section].cells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type
        
        switch cellType {
        case .description(let title, let imageName, let descriptionText, let price, let priceText):
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: DetailsCollectionViewCell.self), for: indexPath) as! DetailsCollectionViewCell
            cell.setupValue(titleText: title, imageName: imageName, descriptionText: descriptionText,price: price, priceText: priceText)
            return cell
        }
    }
}

extension RestaurantMenuViewController: DetailsStructChange {
    
    func detailsValueDidChange(details: [HomeScreenData]?) {
        guard let details = details else { return }
        mutableHomeScreenData = details
    }
}

extension RestaurantMenuViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        if section == 0 {
            return UIEdgeInsets(top: 8.0, left: 4.0, bottom: 8.0, right: 4.0)
        } else {
            return UIEdgeInsets()
        }
    }
}

// Use for Unit tests
extension RestaurantMenuViewController {
    
    func setSections(sections: [RestaurantMenuModel.DisplayedSection]) {
        self.displayedSections = sections
        self.collectionView.reloadData()
    }
}
