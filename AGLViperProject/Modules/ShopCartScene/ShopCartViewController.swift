//
//  ShopCartViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 13.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShopCartDisplayLogic: class {
    func displayShopCartFetchedData(viewModel: ShopCart.FetchShopCartData.ViewModel)
    func displayShopCartControllerMode(viewModel: ShopCart.ChangeControllerMode.ViewModel)
}

class ShopCartViewController: UIViewController {
    
    var interactor: ShopCartBusinessLogic?
    var router: (NSObjectProtocol & ShopCartRoutingLogic & ShopCartDataPassing)?
    
    private var mode: ControllerMode = .viewing
    private var displayedSections: [ShopCart.DisplayedSection] = []
    
    private var tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        
        return tableView
    }()
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController              = self
        let interactor                  = ShopCartInteractor()
        let presenter                   = ShopCartPresenter()
        let router                      = ShopCartRouter()
        viewController.interactor       = interactor
        viewController.router           = router
        interactor.presenter            = presenter
        presenter.viewController        = viewController
        router.viewController           = viewController
        router.dataStore                = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Корзина"
        view.backgroundColor = UIColor.gray
        
        view.addSubview(tableView)
        tableView.frame = view.bounds
        tableView.delegate = self
        tableView.dataSource = self
        
        self.fetchShopCartData()
    }
    
    func fetchShopCartData() {
        let request = ShopCart.FetchShopCartData.Request()
        self.interactor?.fetchRestaurantMenuData(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
}

extension ShopCartViewController: ShopCartDisplayLogic {
    
    func displayShopCartFetchedData(viewModel: ShopCart.FetchShopCartData.ViewModel) {
        self.displayedSections = viewModel.displayedSection
        tableView.reloadData()
        print(displayedSections)
    }
    
    func displayShopCartControllerMode(viewModel: ShopCart.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
}

extension ShopCartViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
    }
}

extension ShopCartViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedSections[section].cells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type
        
        switch cellType {
        case .description(title: let title, priceText: let priceText):
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: ShopCartTableViewCell.self), for: indexPath) as! ShopCartTableViewCell
            cell.setupValue(titleText: title, priceText: priceText)
            return cell
        }
    }
}
