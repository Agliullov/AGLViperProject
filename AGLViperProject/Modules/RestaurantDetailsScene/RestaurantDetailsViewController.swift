//
//  RestaurantDetailsViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 09.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RestaurantDetailsDisplayLogic: class {
    func displayRestaurantDetailsControllerMode(viewModel: RestaurantDetailsModel.ChangeControllerMode.ViewModel)
    func displayRestaurantDetailsFetchedData(viewModel: RestaurantDetailsModel.FetchRestaurantDetailsData.ViewModel)
    func displaySetedBasket(viewModel: RestaurantDetailsModel.SetBasketData.ViewModel)
}

protocol DetailsStructChange: class {
    func detailsValueDidChange(details: [HomeScreenData]?)
}

class RestaurantDetailsViewController: UIViewController {
    
    var interactor: RestaurantDetailsBusinessLogic?
    var router: (NSObjectProtocol & RestaurantDetailsRoutingLogic & RestaurantDetailsDataPassing)?
    
    weak var delegate: DetailsStructChange?
    
    private var mode: ControllerMode = .viewing
    
    private var displayedSections: [RestaurantDetailsModel.DisplayedSection] = []
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.estimatedItemSize = CGSize(width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height)
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        collectionView.backgroundColor = UIColor.white
        collectionView.register(RestaurantDetailsView.self, forCellWithReuseIdentifier: String(describing: RestaurantDetailsView.self))
        return collectionView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController          = self
        let interactor              = RestaurantDetailsInteractor()
        let presenter               = RestaurantDetailsPresenter()
        let router                  = RestaurantDetailsRouter()
        viewController.interactor   = interactor
        viewController.router       = router
        interactor.presenter        = presenter
        presenter.viewController    = viewController
        router.viewController       = viewController
        router.dataStore            = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.addSubview(collectionView)
        collectionView.frame = view.bounds
        collectionView.delegate = self
        collectionView.dataSource = self
        
        titleTextAttribute()
        fetchRestaurantDetailsData()
    }
    
    private func titleTextAttribute() {
        self.title = "Описание"
        
        navigationController?.navigationBar.titleTextAttributes = ColorHelper.shared.titleTextAttribute()
        navigationItem.setRightBarButton(UIBarButtonItem(image: UIImage(systemName: "refresh"), style: .done, target: self, action: nil), animated: true)
    }
    
    private func fetchRestaurantDetailsData() {
        let request = RestaurantDetailsModel.FetchRestaurantDetailsData.Request()
        interactor?.fetchRestaurantDetailsData(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
    
    private func setBasketToDataSource(title: String, imageName: String, details: String, price: Int32, priceText: String, count: Int32) {
        let request = RestaurantDetailsModel.SetBasketData.Request(title: title, imageName: imageName, details: details, price: price, priceText: priceText, count: count)
        self.interactor?.setBasketData(request: request)
    }
}

extension RestaurantDetailsViewController: RestaurantDetailsDisplayLogic {
    
    func displayRestaurantDetailsControllerMode(viewModel: RestaurantDetailsModel.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
    func displayRestaurantDetailsFetchedData(viewModel: RestaurantDetailsModel.FetchRestaurantDetailsData.ViewModel) {
        displayedSections = viewModel.displayedSection
        collectionView.reloadData()
    }
    
    func displaySetedBasket(viewModel: RestaurantDetailsModel.SetBasketData.ViewModel) {
       // CoreDataService.shared.saveBasketDataInCoreData(arr) { (basketArray) in
       //     print(basketArray)
       // }
        
        DataSource.shared.setBasketObject(viewModel.detailsData)
        
        let alertVC = UIAlertController(title: "Добавлено", message: "Товар в корзине", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Продолжить покупки", style: .default, handler: nil)
        //let basketAction = UIAlertAction(title: "Перейти в корзину", style: .default, handler: nil)
        alertVC.addAction(okAction)
        //alertVC.addAction(basketAction)
        self.present(alertVC, animated: true, completion: nil)
    }
}

extension RestaurantDetailsViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension RestaurantDetailsViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedSections[section].cells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type
        
        switch cellType {
        case .details(let title, let imageName, let details, let price, let priceText, let header, let footer, let count):
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: RestaurantDetailsView.self), for: indexPath) as? RestaurantDetailsView else { return UICollectionViewCell() }
            cell.setupValue(titleText: title, imageName: imageName, descriptionText: details, price: price,  priceText: priceText, headerText: header, footerText: footer)
            cell.complitionHandler = { [weak self] in
                self?.setBasketToDataSource(title: title, imageName: imageName, details: details, price: price, priceText: priceText, count: count ?? 0)
            }
            return cell
        }
    }
}

// Use for Unit tests
extension RestaurantDetailsViewController {
    
    func setSections(sections: [RestaurantDetailsModel.DisplayedSection]) {
        displayedSections = sections
        collectionView.reloadData()
    }
}
