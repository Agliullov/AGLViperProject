//
//  RestaurantDetailsInteractor.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 09.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RestaurantDetailsBusinessLogic {
    func fetchRestaurantDetailsData(request: RestaurantDetailsModel.FetchRestaurantDetailsData.Request)
    func setBasketData(request: RestaurantDetailsModel.SetBasketData.Request)
}

protocol RestaurantDetailsDataStore {
    var option: HomeScreenData? { get set }
    var basket: BasketData? {get set }
}

class RestaurantDetailsInteractor: RestaurantDetailsDataStore {
    var presenter: RestaurantDetailsPresentationLogic?
    
    private var worker: RestaurantDetailsWorker = RestaurantDetailsWorker()
    
    private var mutableOption: HomeScreenData?
    
    var option: HomeScreenData? {
        didSet {
            guard option != nil, mutableOption == nil else { return }
            mutableOption = option
        }
    }
    
    var basket: BasketData?
    
    private var mode: ControllerMode = .viewing {
        didSet {
            let response = RestaurantDetailsModel.ChangeControllerMode.Response(mode: mode)
            presenter?.presentRestaurantDetailsControllerMode(response: response)
        }
    }
}

extension RestaurantDetailsInteractor: RestaurantDetailsBusinessLogic {
    
    func fetchRestaurantDetailsData(request: RestaurantDetailsModel.FetchRestaurantDetailsData.Request) {
        let response = RestaurantDetailsModel.FetchRestaurantDetailsData.Response(detailsData: self.mutableOption)
        self.presenter?.presentFetchedRestaurantDetailsData(response: response)
    }
    
    func setBasketData(request: RestaurantDetailsModel.SetBasketData.Request) {
        self.basket = BasketData(price: request.price, title: request.title, imageName: request.imageName, details: request.details, count: request.count)
        let response = RestaurantDetailsModel.SetBasketData.Response(detailsData: self.basket!)
        self.presenter?.presentSetedBasket(response: response)
    }

}

// Use for Unit tests
extension RestaurantDetailsInteractor {
    
    func getMutableOption() -> HomeScreenData {
        return self.option!
    }
    
    func setMutableOption(options: HomeScreenData) {
        self.option = options
    }
    
    func setDBWorker(dbWorker: RestaurantDetailsWorker) {
        self.worker = dbWorker
    }
}
