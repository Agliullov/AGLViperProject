//
//  BasketInteractor.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 13.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BasketBusinessLogic {
    func fetchBasketData(request: BasketModel.FetchBasketData.Request)
    func fetchBasketControllerMode(request: BasketModel.ChangeControllerMode.Request)
    func clearDataStore(request: BasketModel.ClearDataStore.Request)
    func openBasketDetails(request: BasketModel.OpenBasketDetails.Request)
}

protocol BasketDataStore {
    var basketData: [BasketData]? { get set }
}

class BasketInteractor: BasketDataStore {
    var basketData: [BasketData]?
    
    var presenter: BasketPresentationLogic?
    
    private let worker: BasketWorker = BasketWorker()
    
    private var mode: ControllerMode = .viewing {
        didSet {
            let response = BasketModel.ChangeControllerMode.Response(mode: self.mode)
            self.presenter?.presentBasketControllerMode(response: response)
        }
    }
}

extension BasketInteractor: BasketBusinessLogic {
    
    func fetchBasketData(request: BasketModel.FetchBasketData.Request) {
        //let basketObject = DataSource.shared.getBasketObject()
        
        let basketObject: [BasketData] = [
            BasketData(price: 125, title: "First", imageName: "pizz1", details: "qwerty", count: 1),
            BasketData(price: 555, title: "Second", imageName: "pizz2", details: "asdfgh", count: 4)
        ]
        
        let response = BasketModel.FetchBasketData.Response(detailsData: basketObject)
        self.presenter?.presentBasketFetchedData(response: response)
    }
    
    func fetchBasketControllerMode(request: BasketModel.ChangeControllerMode.Request) {
        let response = BasketModel.ChangeControllerMode.Response(mode: self.mode)
        self.presenter?.presentBasketControllerMode(response: response)
    }
    
    func clearDataStore(request: BasketModel.ClearDataStore.Request) {
        DataSource.shared.clearBasketObject()
        let response = BasketModel.ClearDataStore.Response()
        self.presenter?.presentClearDataStore(response: response)
    }
    
    func openBasketDetails(request: BasketModel.OpenBasketDetails.Request) {
        let response = BasketModel.OpenBasketDetails.Response(index: request.index)
        self.presenter?.presentOpenBasketDetails(response: response)
    }
}
