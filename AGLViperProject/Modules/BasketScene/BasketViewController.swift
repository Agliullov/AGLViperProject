//
//  BasketViewController.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 13.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BasketDisplayLogic: class {
    func displayBasketFetchedData(viewModel: BasketModel.FetchBasketData.ViewModel)
    func displayBasketControllerMode(viewModel: BasketModel.ChangeControllerMode.ViewModel)
    func displayClearDataStore(viewModel: BasketModel.ClearDataStore.ViewModel)
    func displayBasketDetails(viewModel: BasketModel.OpenBasketDetails.ViewModel)
}

class BasketViewController: UIViewController {
    
    var interactor: BasketBusinessLogic?
    var router: (NSObjectProtocol & BasketRoutingLogic & BasketDataPassing)?
    
    private var mode: ControllerMode = .viewing
    private var displayedSections: [BasketModel.DisplayedSection] = []
    
    private var tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.allowsSelection = false
        tableView.register(BasketDetailsCell.self, forCellReuseIdentifier: String(describing: BasketDetailsCell.self))
        return tableView
    }()
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController              = self
        let interactor                  = BasketInteractor()
        let presenter                   = BasketPresenter()
        let router                      = BasketRouter()
        viewController.interactor       = interactor
        viewController.router           = router
        interactor.presenter            = presenter
        presenter.viewController        = viewController
        router.viewController           = viewController
        router.dataStore                = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor.gray
        
        view.addSubview(tableView)
        tableView.frame = view.bounds
        tableView.tableFooterView = UIView()
        tableView.delegate = self
        tableView.dataSource = self
        
        titleTextAttribute()
        fetchBasketData()
    }
    
    private func titleTextAttribute() {
        self.title = "Корзина"
        
        navigationController?.navigationBar.titleTextAttributes = ColorHelper.shared.titleTextAttribute()
        navigationItem.setRightBarButton(UIBarButtonItem(image: UIImage(systemName: "trash"), style: .done, target: self, action: #selector(clearDataStore)), animated: true)
    }
    
    @objc func clearDataStore(){
        let request = BasketModel.ClearDataStore.Request()
        self.interactor?.clearDataStore(request: request)
    }
    
    private func fetchBasketData() {
        let request = BasketModel.FetchBasketData.Request()
        self.interactor?.fetchBasketData(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
    
    private func openDetailsViewController(index: Int) {
        let request = BasketModel.OpenBasketDetails.Request(index: index)
        interactor?.openBasketDetails(request: request)
    }
}

extension BasketViewController: BasketDisplayLogic {
    
    func displayBasketFetchedData(viewModel: BasketModel.FetchBasketData.ViewModel) {
        self.displayedSections = viewModel.displayedSection
        tableView.reloadData()
    }
    
    func displayBasketControllerMode(viewModel: BasketModel.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
    func displayClearDataStore(viewModel: BasketModel.ClearDataStore.ViewModel) {
        fetchBasketData()
    }
    
    func displayBasketDetails(viewModel: BasketModel.OpenBasketDetails.ViewModel) {
        self.router?.routeToBasketDetails(index: viewModel.index)
    }
}

extension BasketViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        openDetailsViewController(index: indexPath.item)
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

extension BasketViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let count = (displayedSections[section].cells.count > 0) ? displayedSections[section].cells.count : 1
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if displayedSections[indexPath.section].cells.count > 0 {
            let displayedSection = displayedSections[indexPath.section]
            let cellType = displayedSection.cells[indexPath.row].type
            
            switch cellType {
            case .details(let imageName, let name, let details, let price):
                let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: BasketDetailsCell.self), for: indexPath) as! BasketDetailsCell
                
                cell.setup(imageName: imageName, name: name, details: details, price: price)
                return cell
            }
        } else {
            return UITableViewCell()
        }
    }
}
