//
//  BasketPresenter.swift
//  AGLViperProject
//
//  Created by Раис Аглиуллов on 13.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BasketPresentationLogic {
    func presentBasketFetchedData(response: BasketModel.FetchBasketData.Response)
    func presentBasketControllerMode(response: BasketModel.ChangeControllerMode.Response)
    func presentClearDataStore(response: BasketModel.ClearDataStore.Response)
    func presentOpenBasketDetails(response: BasketModel.OpenBasketDetails.Response)
}

class BasketPresenter {
    
    weak var viewController: BasketDisplayLogic?
    
    private func getSection(options: [BasketData]) -> [BasketModel.DisplayedSection] {
        var cells: [BasketModel.DisplayedSection.DisplayedCell] = []
        for option in options {
            let descriptionCell = BasketModel.DisplayedSection.DisplayedCell(type: .details(imageName: option.imageName, name: option.title, details: option.details, price: option.price))
            cells.append(descriptionCell)
        }
        
        if !cells.isEmpty {
            let orderCell = BasketModel.DisplayedSection.DisplayedCell(type: .orderButton(""))
            cells.append(orderCell)
        }
        
        let section = BasketModel.DisplayedSection(type: .basket, cells: cells)
        return [section]
    }
}

extension BasketPresenter: BasketPresentationLogic {
    
    func presentBasketFetchedData(response: BasketModel.FetchBasketData.Response) {
        let sections = getSection(options: response.detailsData)
        let viewModel = BasketModel.FetchBasketData.ViewModel(displayedSection: sections)
        self.viewController?.displayBasketFetchedData(viewModel: viewModel)
    }
    
    func presentBasketControllerMode(response: BasketModel.ChangeControllerMode.Response) {
        let viewModel = BasketModel.ChangeControllerMode.ViewModel(mode: response.mode)
        self.viewController?.displayBasketControllerMode(viewModel: viewModel)
    }
    
    func presentClearDataStore(response: BasketModel.ClearDataStore.Response) {
        let viewModel = BasketModel.ClearDataStore.ViewModel()
        self.viewController?.displayClearDataStore(viewModel: viewModel)
    }
    
    func presentOpenBasketDetails(response: BasketModel.OpenBasketDetails.Response) {
        let viewModel = BasketModel.OpenBasketDetails.ViewModel(index: response.index)
        self.viewController?.displayBasketDetails(viewModel: viewModel)
    }
}
